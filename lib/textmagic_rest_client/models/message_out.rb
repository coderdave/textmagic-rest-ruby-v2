=begin
#Textmagic API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'date'
require 'time'

module TextmagicRestClient
  class MessageOut
    # Message ID.
    attr_accessor :id

    attr_accessor :text

    # Delivery status of the message. See [message delivery statuses](https://docs.textmagic.com/#section/Delivery-status-codes) for details. 
    attr_accessor :status

    # Recipient contact ID.
    attr_accessor :contact_id

    # Message Session ID of a message.
    attr_accessor :session_id

    # Sending time.
    attr_accessor :message_time

    attr_accessor :avatar

    # Message charset. Could be: *   **ISO-8859-1** for plaintext SMS; *   **UTF-16BE** for Unicode SMS. 
    attr_accessor :charset

    # Human-readable message charset label. Could be: *   **ISO-8859-1** for plaintext SMS; *   **UTF-16BE** for Unicode SMS; *   **Voice** for voice services (Text-to-Speech or Voice Broadcast) messages. 
    attr_accessor :charset_label

    # Contact first name. Could be substituted from your [Contacts](https://docs.textmagic.com/#tag/Contacts) (even if you submitted the phone number instead of the contact ID). 
    attr_accessor :first_name

    # Contact last name.
    attr_accessor :last_name

    # The 2-letter ISO country code of the recipient's phone number. 
    attr_accessor :country

    # Message parts (multiples of 160 characters) count.
    attr_accessor :parts_count

    # Message sender (phone number or alphanumeric Sender ID).
    attr_accessor :sender

    # Recipient`s phone number.
    attr_accessor :receiver

    # Indicates that the message has been deleted.
    attr_accessor :deleted

    # Receipent`s phone number.
    attr_accessor :phone

    # Message price.
    attr_accessor :price

    # The user email which this message came from. For Email2SMS and Distribution Lists the messages, it is an original email address - in other cases, it is an account email address.
    attr_accessor :from_email

    # The Phone number used to send the SMS.
    attr_accessor :from_number

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'text' => :'text',
        :'status' => :'status',
        :'contact_id' => :'contactId',
        :'session_id' => :'sessionId',
        :'message_time' => :'messageTime',
        :'avatar' => :'avatar',
        :'charset' => :'charset',
        :'charset_label' => :'charsetLabel',
        :'first_name' => :'firstName',
        :'last_name' => :'lastName',
        :'country' => :'country',
        :'parts_count' => :'partsCount',
        :'sender' => :'sender',
        :'receiver' => :'receiver',
        :'deleted' => :'deleted',
        :'phone' => :'phone',
        :'price' => :'price',
        :'from_email' => :'fromEmail',
        :'from_number' => :'fromNumber'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'text' => :'String',
        :'status' => :'String',
        :'contact_id' => :'Integer',
        :'session_id' => :'Integer',
        :'message_time' => :'Time',
        :'avatar' => :'String',
        :'charset' => :'String',
        :'charset_label' => :'String',
        :'first_name' => :'String',
        :'last_name' => :'String',
        :'country' => :'String',
        :'parts_count' => :'Integer',
        :'sender' => :'String',
        :'receiver' => :'String',
        :'deleted' => :'Boolean',
        :'phone' => :'String',
        :'price' => :'Float',
        :'from_email' => :'String',
        :'from_number' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
        :'contact_id',
        :'session_id',
        :'avatar',
        :'charset',
        :'charset_label',
        :'first_name',
        :'last_name',
        :'country',
        :'parts_count',
        :'sender',
        :'phone',
        :'price',
        :'from_email',
        :'from_number'
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TextmagicRestClient::MessageOut` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TextmagicRestClient::MessageOut`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      else
        self.id = nil
      end

      if attributes.key?(:'text')
        self.text = attributes[:'text']
      else
        self.text = nil
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      else
        self.status = nil
      end

      if attributes.key?(:'contact_id')
        self.contact_id = attributes[:'contact_id']
      else
        self.contact_id = nil
      end

      if attributes.key?(:'session_id')
        self.session_id = attributes[:'session_id']
      else
        self.session_id = nil
      end

      if attributes.key?(:'message_time')
        self.message_time = attributes[:'message_time']
      else
        self.message_time = nil
      end

      if attributes.key?(:'avatar')
        self.avatar = attributes[:'avatar']
      else
        self.avatar = nil
      end

      if attributes.key?(:'charset')
        self.charset = attributes[:'charset']
      else
        self.charset = nil
      end

      if attributes.key?(:'charset_label')
        self.charset_label = attributes[:'charset_label']
      else
        self.charset_label = nil
      end

      if attributes.key?(:'first_name')
        self.first_name = attributes[:'first_name']
      else
        self.first_name = nil
      end

      if attributes.key?(:'last_name')
        self.last_name = attributes[:'last_name']
      else
        self.last_name = nil
      end

      if attributes.key?(:'country')
        self.country = attributes[:'country']
      else
        self.country = nil
      end

      if attributes.key?(:'parts_count')
        self.parts_count = attributes[:'parts_count']
      else
        self.parts_count = nil
      end

      if attributes.key?(:'sender')
        self.sender = attributes[:'sender']
      end

      if attributes.key?(:'receiver')
        self.receiver = attributes[:'receiver']
      end

      if attributes.key?(:'deleted')
        self.deleted = attributes[:'deleted']
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'price')
        self.price = attributes[:'price']
      end

      if attributes.key?(:'from_email')
        self.from_email = attributes[:'from_email']
      end

      if attributes.key?(:'from_number')
        self.from_number = attributes[:'from_number']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if @id.nil?
        invalid_properties.push('invalid value for "id", id cannot be nil.')
      end

      if @text.nil?
        invalid_properties.push('invalid value for "text", text cannot be nil.')
      end

      if @status.nil?
        invalid_properties.push('invalid value for "status", status cannot be nil.')
      end

      if @message_time.nil?
        invalid_properties.push('invalid value for "message_time", message_time cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      return false if @id.nil?
      return false if @text.nil?
      return false if @status.nil?
      status_validator = EnumAttributeValidator.new('String', ["q", "s", "e", "r", "a", "d", "b", "f", "u", "j", "i", "p", "h"])
      return false unless status_validator.valid?(@status)
      return false if @message_time.nil?
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('String', ["q", "s", "e", "r", "a", "d", "b", "f", "u", "j", "i", "p", "h"])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          text == o.text &&
          status == o.status &&
          contact_id == o.contact_id &&
          session_id == o.session_id &&
          message_time == o.message_time &&
          avatar == o.avatar &&
          charset == o.charset &&
          charset_label == o.charset_label &&
          first_name == o.first_name &&
          last_name == o.last_name &&
          country == o.country &&
          parts_count == o.parts_count &&
          sender == o.sender &&
          receiver == o.receiver &&
          deleted == o.deleted &&
          phone == o.phone &&
          price == o.price &&
          from_email == o.from_email &&
          from_number == o.from_number
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, text, status, contact_id, session_id, message_time, avatar, charset, charset_label, first_name, last_name, country, parts_count, sender, receiver, deleted, phone, price, from_email, from_number].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = TextmagicRestClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
