=begin
#Textmagic API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 2

Generated by: https://openapi-generator.tech
Generator version: 7.5.0

=end

require 'date'
require 'time'

module TextmagicRestClient
  class SendMessageInputObject
    # Message text. Required if the **template_id** is not set.
    attr_accessor :text

    # Template used instead of message text. Required if the **text** is not set.
    attr_accessor :template_id

    # DEPRECATED, consider using sendingDateTime and sendingTimezone parameters instead: Optional (required with rrule set). Message sending time in unix timestamp format. Default is now.
    attr_accessor :sending_time

    # Sending time in Y-m-d H:i:s format (e.g. 2022-05-27 13:05:10). This time is relative to **sendingTimezone**. Note: for correct operation, the value of seconds must not be less than 10.
    attr_accessor :sending_date_time

    # ID or ISO-name of timezone used for sending when sendingDateTime parameter is set. E.g. if you specify sendingDateTime = \\\"2016-05-27 13:02:33\\\" and sendingTimezone = \\\"America/Buenos_Aires\\\", your message will be sent at May 27, 2016 13:02:33 Buenos Aires time, or 16:02:33 UTC. Default is account timezone.
    attr_accessor :sending_timezone

    # Comma separated array of contact resources id message will be sent to.
    attr_accessor :contacts

    # Comma separated array of list resources id message will be sent to.
    attr_accessor :lists

    # Comma separated array of E.164 phone numbers message will be sent to.
    attr_accessor :phones

    # Should sending method cut extra characters which not fit supplied partsCount or return 400 Bad request response instead.
    attr_accessor :cut_extra

    # Maximum message parts count (Textmagic allows sending 1 to 6 message parts).
    attr_accessor :parts_count

    # Custom message reference id which can be used in your application infrastructure.
    attr_accessor :reference_id

    # One of allowed Sender ID (phone number or alphanumeric sender ID). If specified Sender ID is not allowed for some destinations, a fallback default Sender ID will be used to ensure delivery. See [Get timezones](https://docs.textmagic.com/#tag/Sender-IDs).
    attr_accessor :from

    # iCal RRULE parameter to create recurrent scheduled messages. When used, sendingTime is mandatory as start point of sending. See https://www.textmagic.com/free-tools/rrule-generator for format details.
    attr_accessor :rrule

    # Should sending method try to create new Chat (if not exist) with specified recipients?
    attr_accessor :create_chat

    # Send a Text-to-Speech message.
    attr_accessor :tts

    # Treat phone numbers passed in the \\'phones\\' field as local.
    attr_accessor :local

    # The 2-letter ISO country code for local phone numbers, used when \\'local\\' is set to true. Default is the account country.
    attr_accessor :local_country

    # Messsage destination type allowed [mms, tts].
    attr_accessor :destination

    # File name from mms attachment response (named as resource)
    attr_accessor :resources

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'text' => :'text',
        :'template_id' => :'templateId',
        :'sending_time' => :'sendingTime',
        :'sending_date_time' => :'sendingDateTime',
        :'sending_timezone' => :'sendingTimezone',
        :'contacts' => :'contacts',
        :'lists' => :'lists',
        :'phones' => :'phones',
        :'cut_extra' => :'cutExtra',
        :'parts_count' => :'partsCount',
        :'reference_id' => :'referenceId',
        :'from' => :'from',
        :'rrule' => :'rrule',
        :'create_chat' => :'createChat',
        :'tts' => :'tts',
        :'local' => :'local',
        :'local_country' => :'localCountry',
        :'destination' => :'destination',
        :'resources' => :'resources'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'text' => :'String',
        :'template_id' => :'Integer',
        :'sending_time' => :'Integer',
        :'sending_date_time' => :'String',
        :'sending_timezone' => :'String',
        :'contacts' => :'String',
        :'lists' => :'String',
        :'phones' => :'String',
        :'cut_extra' => :'Boolean',
        :'parts_count' => :'Integer',
        :'reference_id' => :'Integer',
        :'from' => :'String',
        :'rrule' => :'String',
        :'create_chat' => :'Boolean',
        :'tts' => :'Boolean',
        :'local' => :'Boolean',
        :'local_country' => :'String',
        :'destination' => :'String',
        :'resources' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `TextmagicRestClient::SendMessageInputObject` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `TextmagicRestClient::SendMessageInputObject`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'text')
        self.text = attributes[:'text']
      end

      if attributes.key?(:'template_id')
        self.template_id = attributes[:'template_id']
      end

      if attributes.key?(:'sending_time')
        self.sending_time = attributes[:'sending_time']
      end

      if attributes.key?(:'sending_date_time')
        self.sending_date_time = attributes[:'sending_date_time']
      end

      if attributes.key?(:'sending_timezone')
        self.sending_timezone = attributes[:'sending_timezone']
      end

      if attributes.key?(:'contacts')
        self.contacts = attributes[:'contacts']
      end

      if attributes.key?(:'lists')
        self.lists = attributes[:'lists']
      end

      if attributes.key?(:'phones')
        self.phones = attributes[:'phones']
      end

      if attributes.key?(:'cut_extra')
        self.cut_extra = attributes[:'cut_extra']
      else
        self.cut_extra = false
      end

      if attributes.key?(:'parts_count')
        self.parts_count = attributes[:'parts_count']
      end

      if attributes.key?(:'reference_id')
        self.reference_id = attributes[:'reference_id']
      end

      if attributes.key?(:'from')
        self.from = attributes[:'from']
      end

      if attributes.key?(:'rrule')
        self.rrule = attributes[:'rrule']
      end

      if attributes.key?(:'create_chat')
        self.create_chat = attributes[:'create_chat']
      else
        self.create_chat = false
      end

      if attributes.key?(:'tts')
        self.tts = attributes[:'tts']
      else
        self.tts = false
      end

      if attributes.key?(:'local')
        self.local = attributes[:'local']
      else
        self.local = false
      end

      if attributes.key?(:'local_country')
        self.local_country = attributes[:'local_country']
      end

      if attributes.key?(:'destination')
        self.destination = attributes[:'destination']
      end

      if attributes.key?(:'resources')
        self.resources = attributes[:'resources']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          text == o.text &&
          template_id == o.template_id &&
          sending_time == o.sending_time &&
          sending_date_time == o.sending_date_time &&
          sending_timezone == o.sending_timezone &&
          contacts == o.contacts &&
          lists == o.lists &&
          phones == o.phones &&
          cut_extra == o.cut_extra &&
          parts_count == o.parts_count &&
          reference_id == o.reference_id &&
          from == o.from &&
          rrule == o.rrule &&
          create_chat == o.create_chat &&
          tts == o.tts &&
          local == o.local &&
          local_country == o.local_country &&
          destination == o.destination &&
          resources == o.resources
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [text, template_id, sending_time, sending_date_time, sending_timezone, contacts, lists, phones, cut_extra, parts_count, reference_id, from, rrule, create_chat, tts, local, local_country, destination, resources].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = TextmagicRestClient.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
